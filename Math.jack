// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A basic math library.
 */
class Math {
	static Array bitmasks;

	/** Initializes the library. */
	function void init() {
		var int bit, bitmask;

		let bitmasks = Array.new(16);
		let bitmask = 1;
		while (bit < 16) {
			let bitmasks[bit] = bitmask;

			let bit = bit + 1;
			let bitmask = bitmask + bitmask;
		}
		return;
	}

	function int getBitmask(int bit) {
		return bitmasks[bit];
	}

	/** Returns the absolute value of x. */
	function int abs(int x) {
		if (x < 0) { return -x; }
		return x;
	}

	/** Returns the product of x and y. */
	function int multiply(int x, int y) {
		var int sum;
		var int bit, bitmask;

		let bitmask = 1;
		while (bit < 16) {
			if (y & bitmask) {
				let sum = sum + x;
			}

			let bit = bit + 1;
			let bitmask = bitmask + bitmask;
			let x = x + x;
		}

		return sum;
	}

	/** Returns the integer part of x/y. */
	function int divide(int x, int y) {
		var Array twiceQY;
		var int result;

		if (x < 0) {
			if (y > 0) {
				return -Math.divide(-x, y);
			}
			else { //y < 0
				return Math.divide(-x, -y);
			}
		}
		else { //x > 0
			if (y < 0) {
				return -Math.divide(x, -y);
			}
		}

		let twiceQY = Array.new(1);
		let result = Math.divisionHelper(x, y, twiceQY);
		do twiceQY.dispose();
		return result;
	}

	function int divisionHelper(int x, int y, Array twiceQY) { //twiceQY[0] stores the value of 2 * q * y for the divisionHelper() call that called this one - its q is whatever this one returns, and its y is half this one's y
		var int q;
		var int twiceY;

		if (y > x) {
			let twiceQY[0] = 0; //2 * 0 * (y / 2) = 0
			return 0;
		}
		let twiceY = y + y;
		if (twiceY < y) { //x >= y; catch for overflow of y
			let twiceQY[0] = y; //2 * 1 * (y / 2) = y
			return 1;
		}

		let q = Math.divisionHelper(x, y + y, twiceQY);
		if ((x - twiceQY[0]) < y) {
			//let twiceQY[0] = twiceQY[0]; (2 * (q + q) * (y / 2) = 2 * q * y)
			return q + q;
		}
		else {
			let twiceQY[0] = twiceQY[0] + y; //2 * (q + q + 1) * (y / 2) = (2q + 1) * y = 2 * q * y + y
			return q + q + 1;
		}
	}

	/** Returns the integer part of the square root of x. */
	function int sqrt(int x) {
		var int bit, bitmask;
		var int root, newRoot;

		let bit = 7; //16/2 - 1
		while (bit > -1) {
			let bitmask = bitmasks[bit];
			let newRoot = root + bitmask;
			if (newRoot < 182) { //prevent multiplication overflow
				if (~((newRoot * newRoot) > x)) {
					let root = newRoot;
				}
			}

			let bit = bit - 1;
		}

		return root;
	}

	/** Returns the greater number. */
	function int max(int a, int b) {
		if (a > b) { return a; }
		return b;
	}

	/** Returns the smaller number. */
	function int min(int a, int b) {
		if (a < b) { return a; }
		return b;
	}

	function int mod(int a, int b) {
		return a - (b * (a / b));
	}

	function int sgn(int a) {
		if (a < 0) { return -1; }
		if (a > 0) { return 1; }
		return 0;
	}
}