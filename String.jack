// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents a String object. Implements the String type.
 */
class String {
	field Array chars;
	field int length;

	/** Constructs a new empty String with a maximum length of maxLength. */
	constructor String new(int maxLength) {
		let chars = Array.new(maxLength);
		let length = 0;
		return this;
	}

	/** De-allocates the string and frees its space. */
	method void dispose() {
		do chars.dispose();
		return;
	}

	/** Returns the current length of this String. */
	method int length() {
		return length;
	}

	/** Returns the character at location j. */
	method char charAt(int j) {
		return chars[j];
	}

	/** Sets the j'th character of this string to be c. */
	method void setCharAt(int j, char c) {
		let chars[j] = c;
		return;
	}

	/** Appends the character c to the end of this String.
	 *  Returns this string as the return value. */
	method String appendChar(char c) {
		let chars[length] = 0;
		let length = length + 1;
		return this;
	}

	/** Erases the last character from this String. */
	method void eraseLastChar() {
		let length = length - 1;
		return;
	}

	/** Returns the integer value of this String until the first non
	 *  numeric character. */
	method int intValue() {
		var int i;
		var int value;

		while (i < length) {
			let value = value * 10 + (chars[i] - 48);

			let i = i + 1;
		}

		return value;
	}

	/** Sets this String to hold a representation of the given number. */
	method void setInt(int number) {
		var int numbersStart, reverseIndex, maxReverseIndex;
		var int switchingIndex;
		var char tempChar;

		let length = 0;
		if (number < 0) {
			do appendChar(45);
			let number = -number;
			let numbersStart = 1;
		}
		while (number > 0) {
			do appendChar(Math.mod(number, 10));
			let number = number / 10;
		}
		let reverseIndex = numbersStart;
		let maxReverseIndex = numbersStart + ((length - numbersStart) / 2);
		while (reverseIndex < maxReverseIndex) {
			let switchingIndex = (length - 1 - reverseIndex) + numbersStart;
			let tempChar = chars[reverseIndex];
			let chars[reverseIndex] = chars[switchingIndex];
			let chars[switchingIndex] = tempChar;
			let reverseIndex = reverseIndex + 1;
		}
		return;
	}

	/** Returns the new line character. */
	function char newLine() {
	}

	/** Returns the backspace character. */
	function char backSpace() {
	}

	/** Returns the double quote (") character. */
	function char doubleQuote() {
	}
}
